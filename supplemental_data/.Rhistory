liver_locus = cqtl_locus,
liver_detection_method = detection_method,
liver_cqtl_chr = cqtl_chr) %>%
mutate(tissue = "liver") %>%
dplyr::select(chromatin, contains("fixef"), contains("ranef"), liver_pos, liver_locus, liver_detection_method, chromatin_pos, chromatin_chr, liver_cqtl_chr),
lung_local_cqtl_dat %>%
dplyr::rename(lung_fixef_effect_size = fixef_cqtl_effect_size,
lung_ranef_effect_size = ranef_cqtl_effect_size,
lung_ranef_A = ranef_A,
lung_ranef_B = ranef_B,
lung_ranef_C = ranef_C,
lung_ranef_D = ranef_D,
lung_ranef_E = ranef_E,
lung_ranef_F = ranef_F,
lung_ranef_G = ranef_G,
lung_ranef_H = ranef_H,
lung_pos = cqtl_pos,
lung_locus = cqtl_locus,
lung_detection_method = detection_method,
lung_cqtl_chr = cqtl_chr) %>%
mutate(tissue = "lung") %>%
dplyr::select(chromatin, contains("fixef"), contains("ranef"), lung_pos, lung_locus, lung_detection_method, chromatin_pos, chromatin_chr, lung_cqtl_chr)) %>%
mutate(dist = abs(liver_pos - lung_pos))
## Haplotype effects correlations
liver_vs_lung_local_cqtl_dat$effect_cor <- sapply(1:nrow(liver_vs_lung_local_cqtl_dat), function(i) cor(as.numeric(liver_vs_lung_local_cqtl_dat[i, c("liver_ranef_A", "liver_ranef_B", "liver_ranef_C", "liver_ranef_D", "liver_ranef_E", "liver_ranef_F", "liver_ranef_G", "liver_ranef_H")]),
as.numeric(liver_vs_lung_local_cqtl_dat[i, c("lung_ranef_A", "lung_ranef_B", "lung_ranef_C", "lung_ranef_D", "lung_ranef_E", "lung_ranef_F", "lung_ranef_G", "lung_ranef_H")])))
## Correlation test
liver_vs_lung_local_cqtl_dat$cor_pval <- run_cor_test(qtl_tab = liver_vs_lung_local_cqtl_dat,
first_tissue = "liver",
second_tissue = "lung",
alt = "greater")
## FDR for correlation p-values
liver_vs_lung_local_cqtl_dat <- liver_vs_lung_local_cqtl_dat %>%
mutate(positive_cor_q = p.adjust(cor_pval, method = "BH")) %>%
mutate(q_high_col = ifelse(positive_cor_q <= 0.1, "positive", "null"))
liver_vs_kidney_local_cqtl_dat <- inner_join(liver_local_cqtl_dat %>%
dplyr::rename(liver_fixef_effect_size = fixef_cqtl_effect_size,
liver_ranef_effect_size = ranef_cqtl_effect_size,
liver_ranef_A = ranef_A,
liver_ranef_B = ranef_B,
liver_ranef_C = ranef_C,
liver_ranef_D = ranef_D,
liver_ranef_E = ranef_E,
liver_ranef_F = ranef_F,
liver_ranef_G = ranef_G,
liver_ranef_H = ranef_H,
liver_pos = cqtl_pos,
liver_locus = cqtl_locus,
liver_detection_method = detection_method,
liver_cqtl_chr = cqtl_chr) %>%
mutate(tissue = "liver") %>%
dplyr::select(chromatin, contains("fixef"), contains("ranef"), liver_pos, liver_locus, liver_detection_method, chromatin_pos, chromatin_chr, liver_cqtl_chr),
kidney_local_cqtl_dat %>%
dplyr::rename(kidney_fixef_effect_size = fixef_cqtl_effect_size,
kidney_ranef_effect_size = ranef_cqtl_effect_size,
kidney_ranef_A = ranef_A,
kidney_ranef_B = ranef_B,
kidney_ranef_C = ranef_C,
kidney_ranef_D = ranef_D,
kidney_ranef_E = ranef_E,
kidney_ranef_F = ranef_F,
kidney_ranef_G = ranef_G,
kidney_ranef_H = ranef_H,
kidney_pos = cqtl_pos,
kidney_locus = cqtl_locus,
kidney_detection_method = detection_method,
kidney_cqtl_chr = cqtl_chr) %>%
mutate(tissue = "kidney") %>%
dplyr::select(chromatin, contains("fixef"), contains("ranef"), kidney_pos, kidney_locus, kidney_detection_method, chromatin_pos, chromatin_chr, kidney_cqtl_chr)) %>%
mutate(dist = abs(liver_pos - kidney_pos))
## Haplotype effects correlations
liver_vs_kidney_local_cqtl_dat$effect_cor <- sapply(1:nrow(liver_vs_kidney_local_cqtl_dat), function(i) cor(as.numeric(liver_vs_kidney_local_cqtl_dat[i, c("liver_ranef_A", "liver_ranef_B", "liver_ranef_C", "liver_ranef_D", "liver_ranef_E", "liver_ranef_F", "liver_ranef_G", "liver_ranef_H")]),
as.numeric(liver_vs_kidney_local_cqtl_dat[i, c("kidney_ranef_A", "kidney_ranef_B", "kidney_ranef_C", "kidney_ranef_D", "kidney_ranef_E", "kidney_ranef_F", "kidney_ranef_G", "kidney_ranef_H")])))
## Correlation test
liver_vs_kidney_local_cqtl_dat$cor_pval <- run_cor_test(qtl_tab = liver_vs_kidney_local_cqtl_dat,
first_tissue = "liver",
second_tissue = "kidney",
alt = "greater")
## FDR for correlation p-values
liver_vs_kidney_local_cqtl_dat <- liver_vs_kidney_local_cqtl_dat %>%
mutate(positive_cor_q = p.adjust(cor_pval, method = "BH")) %>%
mutate(q_high_col = ifelse(positive_cor_q <= 0.1, "positive", "null"))
## Lung vs kidney
lung_vs_kidney_local_cqtl_dat <- inner_join(lung_local_cqtl_dat %>%
dplyr::rename(lung_fixef_effect_size = fixef_cqtl_effect_size,
lung_ranef_effect_size = ranef_cqtl_effect_size,
lung_ranef_A = ranef_A,
lung_ranef_B = ranef_B,
lung_ranef_C = ranef_C,
lung_ranef_D = ranef_D,
lung_ranef_E = ranef_E,
lung_ranef_F = ranef_F,
lung_ranef_G = ranef_G,
lung_ranef_H = ranef_H,
lung_pos = cqtl_pos,
lung_locus = cqtl_locus,
lung_detection_method = detection_method,
lung_cqtl_chr = cqtl_chr) %>%
mutate(tissue = "lung") %>%
dplyr::select(chromatin, contains("fixef"), contains("ranef"), lung_pos, lung_locus, lung_detection_method, chromatin_pos, chromatin_chr, lung_cqtl_chr),
kidney_local_cqtl_dat %>%
dplyr::rename(kidney_fixef_effect_size = fixef_cqtl_effect_size,
kidney_ranef_effect_size = ranef_cqtl_effect_size,
kidney_ranef_A = ranef_A,
kidney_ranef_B = ranef_B,
kidney_ranef_C = ranef_C,
kidney_ranef_D = ranef_D,
kidney_ranef_E = ranef_E,
kidney_ranef_F = ranef_F,
kidney_ranef_G = ranef_G,
kidney_ranef_H = ranef_H,
kidney_pos = cqtl_pos,
kidney_locus = cqtl_locus,
kidney_detection_method = detection_method,
kidney_cqtl_chr = cqtl_chr) %>%
mutate(tissue = "kidney") %>%
dplyr::select(chromatin, contains("fixef"), contains("ranef"), kidney_pos, kidney_locus, kidney_detection_method, chromatin_pos, chromatin_chr, kidney_cqtl_chr)) %>%
mutate(dist = abs(lung_pos - kidney_pos))
## Haplotype effects correlations
lung_vs_kidney_local_cqtl_dat$effect_cor <- sapply(1:nrow(lung_vs_kidney_local_cqtl_dat), function(i) cor(as.numeric(lung_vs_kidney_local_cqtl_dat[i, c("lung_ranef_A", "lung_ranef_B", "lung_ranef_C", "lung_ranef_D", "lung_ranef_E", "lung_ranef_F", "lung_ranef_G", "lung_ranef_H")]),
as.numeric(lung_vs_kidney_local_cqtl_dat[i, c("kidney_ranef_A", "kidney_ranef_B", "kidney_ranef_C", "kidney_ranef_D", "kidney_ranef_E", "kidney_ranef_F", "kidney_ranef_G", "kidney_ranef_H")])))
## Correlation test
lung_vs_kidney_local_cqtl_dat$cor_pval <- run_cor_test(qtl_tab = lung_vs_kidney_local_cqtl_dat,
first_tissue = "lung",
second_tissue = "kidney",
alt = "greater")
## FDR for correlation p-values
lung_vs_kidney_local_cqtl_dat <- lung_vs_kidney_local_cqtl_dat %>%
mutate(positive_cor_q = p.adjust(cor_pval, method = "BH")) %>%
mutate(q_high_col = ifelse(positive_cor_q <= 0.1, "positive", "null"))
raw_liver_eqtl_methodG_dat %>%
filter(eqtl_qval <= 0.1) %>%
summarize_all_eqtl_for_table(expression_dat = liver_expression_dat)
chromatin_mediation_dat <- read.csv(paste0(supp_dir, "S7_File.csv"), header = TRUE)
chromatin_mediation_dat
chromatin_mediation_dat <- read.csv(paste0(supp_dir, "S7_File.csv"), header = TRUE)
liver_chromatin_mediation_dat <- chromatin_mediation_dat %>% filter(tissue == "liver")
lung_chromatin_mediation_dat <- chromatin_mediation_dat %>% filter(tissue == "lung")
kidney_chromatin_mediation_dat <- chromatin_mediation_dat %>% filter(tissue == "kidney")
liver_genomewide_count <- liver_chromatin_mediation_dat %>%
filter(mediation_pval_genomewide < 0.05) %>%
nrow
liver_genomewide_count
liver_chromatin_mediation_dat %>% filter(gene == "Hdhd3") %>% pull(mediation_pval_genomewide)
read.csv(paste0(supp_dir, "S7_File.csv")) %>%
filter(tissue == "lung",
gene == "Ccdc137") %>%
pull(mediation_pval_genomewide)
col2rgb("salmon")
col2rgb("darkturquoise")
CC.paths <- list.files("~/Dropbox (ValdarLab)/Lauren/data/CCbuild38/", full.names=TRUE)
CC.names <- gsub(x=list.files("~/projects/CC_proteomics/data/mrca/CCbuild38/", full.names=FALSE),
pattern="\\_.+$", replacement="", perl=TRUE)
CC.1 <- read.csv(CC.paths[1], header = TRUE)
chr <- CC.1$chromosome
chr.keep <- c(1:19, "X")
keep <- chr %in% chr.keep & rowSums(CC.1[,-(1:3)]) == 1
keep
final.chr <- chr[keep]
final.loci <- CC.1$marker[keep]
final.Mb <- CC.1$position.B38.[keep]
result.array <- array(NA, dim=c(length(CC.paths), ncol(CC.1) - 3, length(final.loci)),
dimnames=list(CC.names, names(CC.1)[-(1:3)], final.loci))
for(i in 1:length(CC.paths)){
this.csv <- read.csv(CC.paths[i], header=TRUE)
result.array[i,,] <- t(this.csv[keep, -(1:3)])
}
load("~/Dropbox (ValdarLab)/Lauren/data/snps.gigamuga.Rdata")
mrca_map <- snps %>%
dplyr::select(marker, chr, cM, pos) %>%
dplyr::rename(bp = pos) %>%
mutate(pos = bp/1e6,
chr = gsub(chr, pattern = "chr", replacement = "")) %>%
filter(chr %in% c(1:19, "X"))
overlapping_markers <- intersect(mrca_map$marker, dimnames(result.array)[[3]])
mrca_map
head(mrca_map)
mrca_map <- snps %>%
dplyr::select(marker, chr, cM, pos) %>%
dplyr::rename(bp = pos) %>%
mutate(pos = bp/1e6,
chr = gsub(chr, pattern = "chr", replacement = "")) %>%
filter(chr %in% c(1:19, "X"))
overlapping_markers <- intersect(mrca_map$marker, dimnames(result.array)[[3]])
## Grabbing just the shared markers
mrca_map <- mrca_map %>%
filter(marker %in% overlapping_markers) %>%
arrange(chr, pos)
head(mrca_map)
mrca_map %>% filter(chr == 1) %>% pull(pos) %>% dif(.)
mrca_map %>% filter(chr == 1) %>% pull(pos) %>% diff(.)
temp <- mrca_map %>% filter(chr == 1) %>% pull(pos) %>% diff(.)
all(temp > 1)
all(temp > 0)
all(temp >= 0)
mrca_map
rowSums(mrca_genoprobs[[1]][,,1])
mrca_full_genoprobs <- qtl2convert::probs_doqtl_to_qtl2(probs = result.array[,,overlapping_markers], map = mrca_map)
mrca_genoprobs <- qtl2::genoprob_to_alleleprob(mrca_full_genoprobs)
result.array <- array(NA, dim=c(length(CC.paths), ncol(CC.1) - 3, length(final.loci)),
dimnames=list(CC.names, names(CC.1)[-(1:3)], final.loci))
for(i in 1:length(CC.paths)){
this.csv <- read.csv(CC.paths[i], header=TRUE)
result.array[i,,] <- t(this.csv[keep, -(1:3)])
}
load("~/Dropbox (ValdarLab)/Lauren/data/snps.gigamuga.Rdata")
mrca_map <- snps %>%
dplyr::select(marker, chr, cM, pos) %>%
dplyr::rename(bp = pos) %>%
mutate(pos = bp/1e6,
chr = gsub(chr, pattern = "chr", replacement = "")) %>%
filter(chr %in% c(1:19, "X"))
overlapping_markers <- intersect(mrca_map$marker, dimnames(result.array)[[3]])
## Grabbing just the shared markers
mrca_map <- mrca_map %>%
filter(marker %in% overlapping_markers) %>%
# Ordering by chr and Mbp
arrange(chr, pos)
load("~/Dropbox (ValdarLab)/Lauren/data/snps.gigamuga.Rdata")
mrca_map <- snps %>%
dplyr::select(marker, chr, cM, pos) %>%
dplyr::rename(bp = pos) %>%
mutate(pos = bp/1e6,
chr = gsub(chr, pattern = "chr", replacement = "")) %>%
filter(chr %in% c(1:19, "X"))
overlapping_markers <- intersect(mrca_map$marker, dimnames(result.array)[[3]])
## Grabbing just the shared markers
mrca_map <- mrca_map %>%
filter(marker %in% overlapping_markers) %>%
# Ordering by chr and Mbp
arrange(chr, pos)
result.array <- result.array[,, mrca_map$marker]
mrca_map$marker
mrca_map$marker
is(mrca_map$marker)
result.array <- result.array[,, as.character(mrca_map$marker)]
options(stringsAsFactors = FALSE)
options(stringsAsFactors = FALSE)
load("~/Dropbox (ValdarLab)/Lauren/data/snps.gigamuga.Rdata")
mrca_map <- snps %>%
dplyr::select(marker, chr, cM, pos) %>%
dplyr::rename(bp = pos) %>%
mutate(pos = bp/1e6,
chr = gsub(chr, pattern = "chr", replacement = "")) %>%
filter(chr %in% c(1:19, "X"))
overlapping_markers <- intersect(mrca_map$marker, dimnames(result.array)[[3]])
## Grabbing just the shared markers
mrca_map <- mrca_map %>%
filter(marker %in% overlapping_markers) %>%
# Ordering by chr and Mbp
arrange(chr, pos)
is(mrca_map$marker)
mrca_full_genoprobs <- qtl2convert::probs_doqtl_to_qtl2(probs = result.array, map = mrca_map)
head(mrca_map)
as.character(mrca_map$marker)[1]
nrow(mrca_map)
dim(result.array)
mrca_map <- mrca_map %>%
filter(marker %in% overlapping_markers) %>%
# Ordering by chr and Mbp
arrange(chr, pos) %>%
mutate(marker = as.character(marker))
is(mrca_map$marker)
result.array <- result.array[,, as.character(mrca_map$marker)]
result.array <- array(NA, dim = c(length(CC.paths), ncol(CC.1) - 3, length(final.loci)),
dimnames = list(CC.names,
names(CC.1)[-(1:3)],
final.loci))
for(i in 1:length(CC.paths)){
this.csv <- read.csv(CC.paths[i], header=TRUE)
result.array[i,,] <- t(this.csv[keep, -(1:3)])
}
load("~/Dropbox (ValdarLab)/Lauren/data/snps.gigamuga.Rdata")
mrca_map <- snps %>%
dplyr::select(marker, chr, cM, pos) %>%
dplyr::rename(bp = pos) %>%
mutate(pos = bp/1e6,
chr = gsub(chr, pattern = "chr", replacement = "")) %>%
filter(chr %in% c(1:19, "X"))
overlapping_markers <- intersect(mrca_map$marker, dimnames(result.array)[[3]])
## Grabbing just the shared markers
mrca_map <- mrca_map %>%
filter(marker %in% overlapping_markers) %>%
# Ordering by chr and Mbp
arrange(chr, pos) %>%
mutate(marker = as.character(marker))
result.array <- result.array[,, as.character(mrca_map$marker)]
mrca_full_genoprobs <- qtl2convert::probs_doqtl_to_qtl2(probs = result.array,
map = mrca_map)
result.array <- array(NA, dim = c(length(CC.paths), ncol(CC.1) - 3, length(final.loci)),
dimnames = list(CC.names,
names(CC.1)[-(1:3)],
final.loci))
for(i in 1:length(CC.paths)){
this.csv <- read.csv(CC.paths[i], header=TRUE)
result.array[i,,] <- t(this.csv[keep, -(1:3)])
}
load("~/Dropbox (ValdarLab)/Lauren/data/snps.gigamuga.Rdata")
mrca_map <- snps %>%
dplyr::select(marker, chr, cM, pos) %>%
dplyr::rename(bp = pos) %>%
mutate(pos = bp/1e6,
chr = gsub(chr, pattern = "chr", replacement = "")) %>%
filter(chr %in% c(1:19, "X"))
overlapping_markers <- intersect(mrca_map$marker, dimnames(result.array)[[3]])
mrca_map <- mrca_map %>%
filter(marker %in% overlapping_markers) %>%
# Ordering by chr and Mbp
arrange(chr, pos) %>%
mutate(marker = as.character(marker))
mrca_full_genoprobs <- qtl2convert::probs_doqtl_to_qtl2(probs = result.array,
map = mrca_map)
result.array <- result.array[,, as.character(mrca_map$marker)]
mrca_full_genoprobs <- qtl2convert::probs_doqtl_to_qtl2(probs = result.array,
map = mrca_map)
mrca_genoprobs <- qtl2::genoprob_to_alleleprob(mrca_full_genoprobs)
is(mrca_full_genoprobs)
mrca_full_genoprobs[[1]][,,1]
dim(mrca_full_genoprobs)
dim(mrca_full_genoprobs[[1]])
is(result.array)
dim(result.array)
result.array[,,1]
load("~/Dropbox (ValdarLab)/Lauren/data/snps.gigamuga.Rdata")
mrca_map <- snps %>%
dplyr::select(marker, chr, cM, pos) %>%
dplyr::rename(bp = pos) %>%
mutate(pos = bp/1e6,
chr = gsub(chr, pattern = "chr", replacement = "")) %>%
filter(chr %in% c(1:19, "X"))
overlapping_markers <- intersect(mrca_map$marker, dimnames(result.array)[[3]])
result.array <- array(NA, dim = c(length(CC.paths), ncol(CC.1) - 3, length(final.loci)),
dimnames = list(CC.names,
names(CC.1)[-(1:3)],
final.loci))
for(i in 1:length(CC.paths)){
this.csv <- read.csv(CC.paths[i], header=TRUE)
result.array[i,,] <- t(this.csv[keep, -(1:3)])
}
load("~/Dropbox (ValdarLab)/Lauren/data/snps.gigamuga.Rdata")
mrca_map <- snps %>%
dplyr::select(marker, chr, cM, pos) %>%
dplyr::rename(bp = pos) %>%
mutate(pos = bp/1e6,
chr = gsub(chr, pattern = "chr", replacement = "")) %>%
filter(chr %in% c(1:19, "X"))
mrca_full_genoprobs <- qtl2convert::probs_doqtl_to_qtl2(probs = result.array,
map = mrca_map)
is(mrca_full_genoprobs)
length(mrca_full_genoprobs)
names(mrca_full_genoprobs)
mrca_full_genoprobs$alleles
mrca_full_genoprobs$alleleprobs
mrca_full_genoprobs$probs
is(mrca_full_genoprobs$probs)
length(mrca_full_genoprobs$probs)
mrca_genoprobs <- qtl2::genoprob_to_alleleprob(mrca_full_genoprobs)
dim(result.array)
is(mrca_map$marker)
mrca_map <- mrca_map %>%
filter(marker %in% overlapping_markers) %>%
# Ordering by chr and Mbp
arrange(chr, pos) %>%
mutate(marker = as.character(marker))
is(mrca_map$marker)
mrca_full_genoprobs <- qtl2convert::probs_doqtl_to_qtl2(probs = result.array,
map = mrca_map)
head(mrca_map)
tail(mrca_map)
?fit1
devtools::install_github("kbroman/qtl2")
detach("package:qtl2", unload = T)
library(qtl2)
?fit1
14 + 15 + 7
library(Diploffect.INLA)
install.packages("Vennerable", repos="http://R-Forge.R-project.org")
source("https://bioconductor.org/biocLite.R"); biocLite(c("RBGL","graph"))
library(Vennerable)
devtools::install_github(""js229/Vennerable"")
devtools::install_github("js229/Vennerable")
biocLite("graph")
library("graph")
library("RBGL")
devtools::install_github("js229/Vennerable")
devtools::install_github("js229/Vennerable")
library("graph")
library("RBGL")
install.packages("Vennerable", repos="http://R-Forge.R-project.org")
install.packages("reshape")
install.packages("Vennerable", repos="http://R-Forge.R-project.org")
26324.522/5178.832
26324.522/298.021
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("data.table")
install.packages("brms")
install.packages("devtools")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("lme4")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
library(grid)
library(gridExtra)
library(scales)
library(Vennerable)
install_github("js229/Vennerable")
devtools::install_github("js229/Vennerable")
install.package("emmeans")
raw_abs_trimethyl_dat <- read.table("Supplemental_Data2.txt")
names(raw_abs_trimethyl_dat) <- c("gene", "assay", "replicate", "timepoint", "value")
## Process for further analysis
abs_trimethyl_dat <- raw_abs_trimethyl_dat %>%
mutate(transformed_value = round(value * 1000),
assay = as.factor(assay),
assay = recode(assay, "1" = "writer_loss", "2" = "writer_eraser_loss", "3" = "writer_add"),
sample_unit = paste(gene, assay, replicate, sep = "_"),
timepoint_cat = factor(timepoint)) %>%
mutate(timepoint = case_when(assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 0 ~ 0,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 1 ~ 30/60,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 2 ~ 60/60,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 3 ~ 90/60,
assay == "writer_add" & timepoint_cat == 0 ~ 0,
assay == "writer_add" & timepoint_cat == 1 ~ 20/60,
assay == "writer_add" & timepoint_cat == 2 ~ 40/60,
assay == "writer_add" & timepoint_cat == 3 ~ 60/60),
timepoint_min = case_when(assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 0 ~ 0,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 1 ~ 30,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 2 ~ 60,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 3 ~ 90,
assay == "writer_add" & timepoint_cat == 0 ~ 0,
assay == "writer_add" & timepoint_cat == 1 ~ 20,
assay == "writer_add" & timepoint_cat == 2 ~ 40,
assay == "writer_add" & timepoint_cat == 3 ~ 60))
library(lme4)
library(tidyverse)
library(brms)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
setwd("~/Documents/git_repositories/chipseq-gene-dynamics/supplemental_data/")
raw_rel_trimethyl_dat <- read.table("Supplemental_Data1.txt")
names(raw_rel_trimethyl_dat) <- c("gene", "assay", "replicate", "timepoint", "value")
rel_trimethyl_dat <- raw_rel_trimethyl_dat %>%
mutate(assay = as.factor(assay),
assay = recode(assay, "1" = "writer_loss", "2" = "writer_eraser_loss", "3" = "writer_add"),
sample_unit = paste(gene, assay, replicate, sep = "_"),
timepoint_cat = factor(timepoint)) %>%
mutate(timepoint = case_when(assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 0 ~ 0,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 1 ~ 30/60,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 2 ~ 60/60,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 3 ~ 90/60,
assay == "writer_add" & timepoint_cat == 0 ~ 0,
assay == "writer_add" & timepoint_cat == 1 ~ 20/60,
assay == "writer_add" & timepoint_cat == 2 ~ 40/60,
assay == "writer_add" & timepoint_cat == 3 ~ 60/60),
timepoint_min = case_when(assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 0 ~ 0,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 1 ~ 30,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 2 ~ 60,
assay %in% c("writer_loss", "writer_eraser_loss") & timepoint_cat == 3 ~ 90,
assay == "writer_add" & timepoint_cat == 0 ~ 0,
assay == "writer_add" & timepoint_cat == 1 ~ 20,
assay == "writer_add" & timepoint_cat == 2 ~ 40,
assay == "writer_add" & timepoint_cat == 3 ~ 60))
run_single_beta_brms <- function(rel_dat,
this_gene,
this_assay = c("writer_loss", "writer_eraser_loss", "writer_add"),
adapt_delta = 0.8,
iter = 2000,
zo_inflation = TRUE,
seed = 123,
rhat_cutoff = 1.1,
run_limit = 10) {
this_assay <- this_assay[1]
use_dat <- rel_dat %>%
filter(gene == this_gene,
assay == this_assay)
stop_now <- FALSE
num_runs <- 0
while(!stop_now) {
brm_fit <- brm(value ~ 1 + timepoint + (1 + timepoint | sample_unit),
data = use_dat,
family = ifelse(zo_inflation, "zero_one_inflated_beta", "beta"),
iter = iter,
control = list(adapt_delta = adapt_delta),
seed = seed)
brm_fixed <- summary(brm_fit)$fixed %>% as.data.frame %>% rownames_to_column("parameter")
brm_random <- summary(brm_fit)$random %>% as.data.frame %>% rownames_to_column("parameter")
num_runs <- num_runs + 1
if ((all(brm_fixed$Rhat < rhat_cutoff) & all(brm_fixed$Rhat < rhat_cutoff) & all(brm_fixed$Rhat < rhat_cutoff)) | num_runs == run_limit) {
stop_now <- TRUE
}
else {
seed <- seed + 1
}
}
brm_fit
}
cds1_beta_writer_add_fit <- run_single_beta_brms(rel_dat = rel_trimethyl_dat,
this_gene = "YBR029C",
this_assay = "writer_add",
seed = 124)
cds1_beta_writer_loss_fit <- run_single_beta_brms(rel_dat = rel_trimethyl_dat,
this_gene = "YBR029C",
this_assay = "writer_loss",
seed = 124)
pkgbuild::has_build_tools(debug = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
